"use strict";
// tslint:disable
/**
 * collect
 * Collect Web Application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var globalImportUrl = require("url");
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("./base");
/**
 * AlertControllerApi - axios parameter creator
 * @export
 */
exports.AlertControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerCommit: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/alerts/commit";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/alerts/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/alerts";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerDeleteAll: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/alerts/all";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling alertControllerDeleteById.');
            }
            var localVarPath = "/alerts/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {AlertFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/alerts";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {AlertFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling alertControllerFindById.');
            }
            var localVarPath = "/alerts/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling alertControllerReplaceById.');
            }
            var localVarPath = "/alerts/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/alerts";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling alertControllerUpdateById.');
            }
            var localVarPath = "/alerts/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AlertControllerApi - functional programming interface
 * @export
 */
exports.AlertControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerCommit: function (options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerCommit(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerDeleteAll: function (options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerDeleteAll(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {AlertFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {AlertFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.AlertControllerApiAxiosParamCreator(configuration).alertControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * AlertControllerApi - factory interface
 * @export
 */
exports.AlertControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerCommit: function (options) {
            return exports.AlertControllerApiFp(configuration).alertControllerCommit(options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerCount: function (where, options) {
            return exports.AlertControllerApiFp(configuration).alertControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerCreate: function (requestBody, options) {
            return exports.AlertControllerApiFp(configuration).alertControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerDeleteAll: function (options) {
            return exports.AlertControllerApiFp(configuration).alertControllerDeleteAll(options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerDeleteById: function (id, options) {
            return exports.AlertControllerApiFp(configuration).alertControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {AlertFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerFind: function (filter, options) {
            return exports.AlertControllerApiFp(configuration).alertControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {AlertFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerFindById: function (id, filter, options) {
            return exports.AlertControllerApiFp(configuration).alertControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerReplaceById: function (id, requestBody, options) {
            return exports.AlertControllerApiFp(configuration).alertControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerUpdateAll: function (where, requestBody, options) {
            return exports.AlertControllerApiFp(configuration).alertControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertControllerUpdateById: function (id, requestBody, options) {
            return exports.AlertControllerApiFp(configuration).alertControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * AlertControllerApi - object-oriented interface
 * @export
 * @class AlertControllerApi
 * @extends {BaseAPI}
 */
var AlertControllerApi = /** @class */ (function (_super) {
    __extends(AlertControllerApi, _super);
    function AlertControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerCommit = function (options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerCommit(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerCount = function (where, options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerCreate = function (requestBody, options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerDeleteAll = function (options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerDeleteAll(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerDeleteById = function (id, options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {AlertFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerFind = function (filter, options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {AlertFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerFindById = function (id, filter, options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerReplaceById = function (id, requestBody, options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerUpdateAll = function (where, requestBody, options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertControllerApi
     */
    AlertControllerApi.prototype.alertControllerUpdateById = function (id, requestBody, options) {
        return exports.AlertControllerApiFp(this.configuration).alertControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return AlertControllerApi;
}(base_1.BaseAPI));
exports.AlertControllerApi = AlertControllerApi;
/**
 * AlertNotificationControllerApi - axios parameter creator
 * @export
 */
exports.AlertNotificationControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerCreate: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling alertNotificationControllerCreate.');
            }
            var localVarPath = "/alerts/{id}/notifications"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerDelete: function (id, where, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling alertNotificationControllerDelete.');
            }
            var localVarPath = "/alerts/{id}/notifications"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerFind: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling alertNotificationControllerFind.');
            }
            var localVarPath = "/alerts/{id}/notifications"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerPatch: function (id, where, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling alertNotificationControllerPatch.');
            }
            var localVarPath = "/alerts/{id}/notifications"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AlertNotificationControllerApi - functional programming interface
 * @export
 */
exports.AlertNotificationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerCreate: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.AlertNotificationControllerApiAxiosParamCreator(configuration).alertNotificationControllerCreate(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerDelete: function (id, where, options) {
            var localVarAxiosArgs = exports.AlertNotificationControllerApiAxiosParamCreator(configuration).alertNotificationControllerDelete(id, where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerFind: function (id, filter, options) {
            var localVarAxiosArgs = exports.AlertNotificationControllerApiAxiosParamCreator(configuration).alertNotificationControllerFind(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerPatch: function (id, where, requestBody, options) {
            var localVarAxiosArgs = exports.AlertNotificationControllerApiAxiosParamCreator(configuration).alertNotificationControllerPatch(id, where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * AlertNotificationControllerApi - factory interface
 * @export
 */
exports.AlertNotificationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerCreate: function (id, requestBody, options) {
            return exports.AlertNotificationControllerApiFp(configuration).alertNotificationControllerCreate(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerDelete: function (id, where, options) {
            return exports.AlertNotificationControllerApiFp(configuration).alertNotificationControllerDelete(id, where, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerFind: function (id, filter, options) {
            return exports.AlertNotificationControllerApiFp(configuration).alertNotificationControllerFind(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertNotificationControllerPatch: function (id, where, requestBody, options) {
            return exports.AlertNotificationControllerApiFp(configuration).alertNotificationControllerPatch(id, where, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * AlertNotificationControllerApi - object-oriented interface
 * @export
 * @class AlertNotificationControllerApi
 * @extends {BaseAPI}
 */
var AlertNotificationControllerApi = /** @class */ (function (_super) {
    __extends(AlertNotificationControllerApi, _super);
    function AlertNotificationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertNotificationControllerApi
     */
    AlertNotificationControllerApi.prototype.alertNotificationControllerCreate = function (id, requestBody, options) {
        return exports.AlertNotificationControllerApiFp(this.configuration).alertNotificationControllerCreate(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertNotificationControllerApi
     */
    AlertNotificationControllerApi.prototype.alertNotificationControllerDelete = function (id, where, options) {
        return exports.AlertNotificationControllerApiFp(this.configuration).alertNotificationControllerDelete(id, where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertNotificationControllerApi
     */
    AlertNotificationControllerApi.prototype.alertNotificationControllerFind = function (id, filter, options) {
        return exports.AlertNotificationControllerApiFp(this.configuration).alertNotificationControllerFind(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertNotificationControllerApi
     */
    AlertNotificationControllerApi.prototype.alertNotificationControllerPatch = function (id, where, requestBody, options) {
        return exports.AlertNotificationControllerApiFp(this.configuration).alertNotificationControllerPatch(id, where, requestBody, options)(this.axios, this.basePath);
    };
    return AlertNotificationControllerApi;
}(base_1.BaseAPI));
exports.AlertNotificationControllerApi = AlertNotificationControllerApi;
/**
 * AlertTagControllerApi - axios parameter creator
 * @export
 */
exports.AlertTagControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertTagControllerGetTag: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling alertTagControllerGetTag.');
            }
            var localVarPath = "/alerts/{id}/tag"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AlertTagControllerApi - functional programming interface
 * @export
 */
exports.AlertTagControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertTagControllerGetTag: function (id, options) {
            var localVarAxiosArgs = exports.AlertTagControllerApiAxiosParamCreator(configuration).alertTagControllerGetTag(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * AlertTagControllerApi - factory interface
 * @export
 */
exports.AlertTagControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertTagControllerGetTag: function (id, options) {
            return exports.AlertTagControllerApiFp(configuration).alertTagControllerGetTag(id, options)(axios, basePath);
        }
    };
};
/**
 * AlertTagControllerApi - object-oriented interface
 * @export
 * @class AlertTagControllerApi
 * @extends {BaseAPI}
 */
var AlertTagControllerApi = /** @class */ (function (_super) {
    __extends(AlertTagControllerApi, _super);
    function AlertTagControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertTagControllerApi
     */
    AlertTagControllerApi.prototype.alertTagControllerGetTag = function (id, options) {
        return exports.AlertTagControllerApiFp(this.configuration).alertTagControllerGetTag(id, options)(this.axios, this.basePath);
    };
    return AlertTagControllerApi;
}(base_1.BaseAPI));
exports.AlertTagControllerApi = AlertTagControllerApi;
/**
 * CommitControllerApi - axios parameter creator
 * @export
 */
exports.CommitControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitControllerCommit: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/commit";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * CommitControllerApi - functional programming interface
 * @export
 */
exports.CommitControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitControllerCommit: function (options) {
            var localVarAxiosArgs = exports.CommitControllerApiAxiosParamCreator(configuration).commitControllerCommit(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * CommitControllerApi - factory interface
 * @export
 */
exports.CommitControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitControllerCommit: function (options) {
            return exports.CommitControllerApiFp(configuration).commitControllerCommit(options)(axios, basePath);
        }
    };
};
/**
 * CommitControllerApi - object-oriented interface
 * @export
 * @class CommitControllerApi
 * @extends {BaseAPI}
 */
var CommitControllerApi = /** @class */ (function (_super) {
    __extends(CommitControllerApi, _super);
    function CommitControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitControllerApi
     */
    CommitControllerApi.prototype.commitControllerCommit = function (options) {
        return exports.CommitControllerApiFp(this.configuration).commitControllerCommit(options)(this.axios, this.basePath);
    };
    return CommitControllerApi;
}(base_1.BaseAPI));
exports.CommitControllerApi = CommitControllerApi;
/**
 * ConfigControllerApi - axios parameter creator
 * @export
 */
exports.ConfigControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/configs/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/configs";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling configControllerDeleteById.');
            }
            var localVarPath = "/configs/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {ConfigFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/configs";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {ConfigFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling configControllerFindById.');
            }
            var localVarPath = "/configs/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling configControllerReplaceById.');
            }
            var localVarPath = "/configs/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/configs";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling configControllerUpdateById.');
            }
            var localVarPath = "/configs/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * ConfigControllerApi - functional programming interface
 * @export
 */
exports.ConfigControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.ConfigControllerApiAxiosParamCreator(configuration).configControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.ConfigControllerApiAxiosParamCreator(configuration).configControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.ConfigControllerApiAxiosParamCreator(configuration).configControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {ConfigFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.ConfigControllerApiAxiosParamCreator(configuration).configControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {ConfigFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.ConfigControllerApiAxiosParamCreator(configuration).configControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.ConfigControllerApiAxiosParamCreator(configuration).configControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.ConfigControllerApiAxiosParamCreator(configuration).configControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.ConfigControllerApiAxiosParamCreator(configuration).configControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * ConfigControllerApi - factory interface
 * @export
 */
exports.ConfigControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerCount: function (where, options) {
            return exports.ConfigControllerApiFp(configuration).configControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerCreate: function (requestBody, options) {
            return exports.ConfigControllerApiFp(configuration).configControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerDeleteById: function (id, options) {
            return exports.ConfigControllerApiFp(configuration).configControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {ConfigFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerFind: function (filter, options) {
            return exports.ConfigControllerApiFp(configuration).configControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {ConfigFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerFindById: function (id, filter, options) {
            return exports.ConfigControllerApiFp(configuration).configControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerReplaceById: function (id, requestBody, options) {
            return exports.ConfigControllerApiFp(configuration).configControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerUpdateAll: function (where, requestBody, options) {
            return exports.ConfigControllerApiFp(configuration).configControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerUpdateById: function (id, requestBody, options) {
            return exports.ConfigControllerApiFp(configuration).configControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * ConfigControllerApi - object-oriented interface
 * @export
 * @class ConfigControllerApi
 * @extends {BaseAPI}
 */
var ConfigControllerApi = /** @class */ (function (_super) {
    __extends(ConfigControllerApi, _super);
    function ConfigControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    ConfigControllerApi.prototype.configControllerCount = function (where, options) {
        return exports.ConfigControllerApiFp(this.configuration).configControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    ConfigControllerApi.prototype.configControllerCreate = function (requestBody, options) {
        return exports.ConfigControllerApiFp(this.configuration).configControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    ConfigControllerApi.prototype.configControllerDeleteById = function (id, options) {
        return exports.ConfigControllerApiFp(this.configuration).configControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {ConfigFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    ConfigControllerApi.prototype.configControllerFind = function (filter, options) {
        return exports.ConfigControllerApiFp(this.configuration).configControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {ConfigFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    ConfigControllerApi.prototype.configControllerFindById = function (id, filter, options) {
        return exports.ConfigControllerApiFp(this.configuration).configControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    ConfigControllerApi.prototype.configControllerReplaceById = function (id, requestBody, options) {
        return exports.ConfigControllerApiFp(this.configuration).configControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    ConfigControllerApi.prototype.configControllerUpdateAll = function (where, requestBody, options) {
        return exports.ConfigControllerApiFp(this.configuration).configControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigControllerApi
     */
    ConfigControllerApi.prototype.configControllerUpdateById = function (id, requestBody, options) {
        return exports.ConfigControllerApiFp(this.configuration).configControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return ConfigControllerApi;
}(base_1.BaseAPI));
exports.ConfigControllerApi = ConfigControllerApi;
/**
 * DeviceControllerApi - axios parameter creator
 * @export
 */
exports.DeviceControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCommit: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/devices/commit";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/devices/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/devices";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerDeleteAll: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/devices/all";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceControllerDeleteById.');
            }
            var localVarPath = "/devices/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {DeviceFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/devices";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {DeviceFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceControllerFindById.');
            }
            var localVarPath = "/devices/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceControllerReplaceById.');
            }
            var localVarPath = "/devices/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/devices";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceControllerUpdateById.');
            }
            var localVarPath = "/devices/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * DeviceControllerApi - functional programming interface
 * @export
 */
exports.DeviceControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCommit: function (options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerCommit(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerDeleteAll: function (where, options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerDeleteAll(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {DeviceFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {DeviceFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceControllerApiAxiosParamCreator(configuration).deviceControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * DeviceControllerApi - factory interface
 * @export
 */
exports.DeviceControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCommit: function (options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerCommit(options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCount: function (where, options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCreate: function (requestBody, options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerDeleteAll: function (where, options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerDeleteAll(where, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerDeleteById: function (id, options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {DeviceFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerFind: function (filter, options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {DeviceFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerFindById: function (id, filter, options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerReplaceById: function (id, requestBody, options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerUpdateAll: function (where, requestBody, options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerUpdateById: function (id, requestBody, options) {
            return exports.DeviceControllerApiFp(configuration).deviceControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * DeviceControllerApi - object-oriented interface
 * @export
 * @class DeviceControllerApi
 * @extends {BaseAPI}
 */
var DeviceControllerApi = /** @class */ (function (_super) {
    __extends(DeviceControllerApi, _super);
    function DeviceControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerCommit = function (options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerCommit(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerCount = function (where, options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerCreate = function (requestBody, options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerDeleteAll = function (where, options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerDeleteAll(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerDeleteById = function (id, options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {DeviceFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerFind = function (filter, options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {DeviceFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerFindById = function (id, filter, options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerReplaceById = function (id, requestBody, options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerUpdateAll = function (where, requestBody, options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    DeviceControllerApi.prototype.deviceControllerUpdateById = function (id, requestBody, options) {
        return exports.DeviceControllerApiFp(this.configuration).deviceControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return DeviceControllerApi;
}(base_1.BaseAPI));
exports.DeviceControllerApi = DeviceControllerApi;
/**
 * DeviceDeviceTypeControllerApi - axios parameter creator
 * @export
 */
exports.DeviceDeviceTypeControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceDeviceTypeControllerGetDeviceType: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceDeviceTypeControllerGetDeviceType.');
            }
            var localVarPath = "/devices/{id}/device-type"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * DeviceDeviceTypeControllerApi - functional programming interface
 * @export
 */
exports.DeviceDeviceTypeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceDeviceTypeControllerGetDeviceType: function (id, options) {
            var localVarAxiosArgs = exports.DeviceDeviceTypeControllerApiAxiosParamCreator(configuration).deviceDeviceTypeControllerGetDeviceType(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * DeviceDeviceTypeControllerApi - factory interface
 * @export
 */
exports.DeviceDeviceTypeControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceDeviceTypeControllerGetDeviceType: function (id, options) {
            return exports.DeviceDeviceTypeControllerApiFp(configuration).deviceDeviceTypeControllerGetDeviceType(id, options)(axios, basePath);
        }
    };
};
/**
 * DeviceDeviceTypeControllerApi - object-oriented interface
 * @export
 * @class DeviceDeviceTypeControllerApi
 * @extends {BaseAPI}
 */
var DeviceDeviceTypeControllerApi = /** @class */ (function (_super) {
    __extends(DeviceDeviceTypeControllerApi, _super);
    function DeviceDeviceTypeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceDeviceTypeControllerApi
     */
    DeviceDeviceTypeControllerApi.prototype.deviceDeviceTypeControllerGetDeviceType = function (id, options) {
        return exports.DeviceDeviceTypeControllerApiFp(this.configuration).deviceDeviceTypeControllerGetDeviceType(id, options)(this.axios, this.basePath);
    };
    return DeviceDeviceTypeControllerApi;
}(base_1.BaseAPI));
exports.DeviceDeviceTypeControllerApi = DeviceDeviceTypeControllerApi;
/**
 * DeviceTagControllerApi - axios parameter creator
 * @export
 */
exports.DeviceTagControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerCreate: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTagControllerCreate.');
            }
            var localVarPath = "/devices/{id}/tags"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerDelete: function (id, where, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTagControllerDelete.');
            }
            var localVarPath = "/devices/{id}/tags"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerFind: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTagControllerFind.');
            }
            var localVarPath = "/devices/{id}/tags"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerPatch: function (id, where, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTagControllerPatch.');
            }
            var localVarPath = "/devices/{id}/tags"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * DeviceTagControllerApi - functional programming interface
 * @export
 */
exports.DeviceTagControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerCreate: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTagControllerApiAxiosParamCreator(configuration).deviceTagControllerCreate(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerDelete: function (id, where, options) {
            var localVarAxiosArgs = exports.DeviceTagControllerApiAxiosParamCreator(configuration).deviceTagControllerDelete(id, where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerFind: function (id, filter, options) {
            var localVarAxiosArgs = exports.DeviceTagControllerApiAxiosParamCreator(configuration).deviceTagControllerFind(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerPatch: function (id, where, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTagControllerApiAxiosParamCreator(configuration).deviceTagControllerPatch(id, where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * DeviceTagControllerApi - factory interface
 * @export
 */
exports.DeviceTagControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerCreate: function (id, requestBody, options) {
            return exports.DeviceTagControllerApiFp(configuration).deviceTagControllerCreate(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerDelete: function (id, where, options) {
            return exports.DeviceTagControllerApiFp(configuration).deviceTagControllerDelete(id, where, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerFind: function (id, filter, options) {
            return exports.DeviceTagControllerApiFp(configuration).deviceTagControllerFind(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTagControllerPatch: function (id, where, requestBody, options) {
            return exports.DeviceTagControllerApiFp(configuration).deviceTagControllerPatch(id, where, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * DeviceTagControllerApi - object-oriented interface
 * @export
 * @class DeviceTagControllerApi
 * @extends {BaseAPI}
 */
var DeviceTagControllerApi = /** @class */ (function (_super) {
    __extends(DeviceTagControllerApi, _super);
    function DeviceTagControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTagControllerApi
     */
    DeviceTagControllerApi.prototype.deviceTagControllerCreate = function (id, requestBody, options) {
        return exports.DeviceTagControllerApiFp(this.configuration).deviceTagControllerCreate(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTagControllerApi
     */
    DeviceTagControllerApi.prototype.deviceTagControllerDelete = function (id, where, options) {
        return exports.DeviceTagControllerApiFp(this.configuration).deviceTagControllerDelete(id, where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTagControllerApi
     */
    DeviceTagControllerApi.prototype.deviceTagControllerFind = function (id, filter, options) {
        return exports.DeviceTagControllerApiFp(this.configuration).deviceTagControllerFind(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTagControllerApi
     */
    DeviceTagControllerApi.prototype.deviceTagControllerPatch = function (id, where, requestBody, options) {
        return exports.DeviceTagControllerApiFp(this.configuration).deviceTagControllerPatch(id, where, requestBody, options)(this.axios, this.basePath);
    };
    return DeviceTagControllerApi;
}(base_1.BaseAPI));
exports.DeviceTagControllerApi = DeviceTagControllerApi;
/**
 * DeviceTypeControllerApi - axios parameter creator
 * @export
 */
exports.DeviceTypeControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/device-types/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/device-types";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerDeleteAll: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/device-type/all";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeControllerDeleteById.');
            }
            var localVarPath = "/device-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {VersionedEntityFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/device-types";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {DeviceTypeFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeControllerFindById.');
            }
            var localVarPath = "/device-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeControllerReplaceById.');
            }
            var localVarPath = "/device-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/device-types";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeControllerUpdateById.');
            }
            var localVarPath = "/device-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * DeviceTypeControllerApi - functional programming interface
 * @export
 */
exports.DeviceTypeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.DeviceTypeControllerApiAxiosParamCreator(configuration).deviceTypeControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTypeControllerApiAxiosParamCreator(configuration).deviceTypeControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerDeleteAll: function (options) {
            var localVarAxiosArgs = exports.DeviceTypeControllerApiAxiosParamCreator(configuration).deviceTypeControllerDeleteAll(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.DeviceTypeControllerApiAxiosParamCreator(configuration).deviceTypeControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {VersionedEntityFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.DeviceTypeControllerApiAxiosParamCreator(configuration).deviceTypeControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {DeviceTypeFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.DeviceTypeControllerApiAxiosParamCreator(configuration).deviceTypeControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTypeControllerApiAxiosParamCreator(configuration).deviceTypeControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTypeControllerApiAxiosParamCreator(configuration).deviceTypeControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTypeControllerApiAxiosParamCreator(configuration).deviceTypeControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * DeviceTypeControllerApi - factory interface
 * @export
 */
exports.DeviceTypeControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerCount: function (where, options) {
            return exports.DeviceTypeControllerApiFp(configuration).deviceTypeControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerCreate: function (requestBody, options) {
            return exports.DeviceTypeControllerApiFp(configuration).deviceTypeControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerDeleteAll: function (options) {
            return exports.DeviceTypeControllerApiFp(configuration).deviceTypeControllerDeleteAll(options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerDeleteById: function (id, options) {
            return exports.DeviceTypeControllerApiFp(configuration).deviceTypeControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {VersionedEntityFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerFind: function (filter, options) {
            return exports.DeviceTypeControllerApiFp(configuration).deviceTypeControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {DeviceTypeFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerFindById: function (id, filter, options) {
            return exports.DeviceTypeControllerApiFp(configuration).deviceTypeControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerReplaceById: function (id, requestBody, options) {
            return exports.DeviceTypeControllerApiFp(configuration).deviceTypeControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerUpdateAll: function (where, requestBody, options) {
            return exports.DeviceTypeControllerApiFp(configuration).deviceTypeControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeControllerUpdateById: function (id, requestBody, options) {
            return exports.DeviceTypeControllerApiFp(configuration).deviceTypeControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * DeviceTypeControllerApi - object-oriented interface
 * @export
 * @class DeviceTypeControllerApi
 * @extends {BaseAPI}
 */
var DeviceTypeControllerApi = /** @class */ (function (_super) {
    __extends(DeviceTypeControllerApi, _super);
    function DeviceTypeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeControllerApi
     */
    DeviceTypeControllerApi.prototype.deviceTypeControllerCount = function (where, options) {
        return exports.DeviceTypeControllerApiFp(this.configuration).deviceTypeControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeControllerApi
     */
    DeviceTypeControllerApi.prototype.deviceTypeControllerCreate = function (requestBody, options) {
        return exports.DeviceTypeControllerApiFp(this.configuration).deviceTypeControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeControllerApi
     */
    DeviceTypeControllerApi.prototype.deviceTypeControllerDeleteAll = function (options) {
        return exports.DeviceTypeControllerApiFp(this.configuration).deviceTypeControllerDeleteAll(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeControllerApi
     */
    DeviceTypeControllerApi.prototype.deviceTypeControllerDeleteById = function (id, options) {
        return exports.DeviceTypeControllerApiFp(this.configuration).deviceTypeControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {VersionedEntityFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeControllerApi
     */
    DeviceTypeControllerApi.prototype.deviceTypeControllerFind = function (filter, options) {
        return exports.DeviceTypeControllerApiFp(this.configuration).deviceTypeControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {DeviceTypeFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeControllerApi
     */
    DeviceTypeControllerApi.prototype.deviceTypeControllerFindById = function (id, filter, options) {
        return exports.DeviceTypeControllerApiFp(this.configuration).deviceTypeControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeControllerApi
     */
    DeviceTypeControllerApi.prototype.deviceTypeControllerReplaceById = function (id, requestBody, options) {
        return exports.DeviceTypeControllerApiFp(this.configuration).deviceTypeControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeControllerApi
     */
    DeviceTypeControllerApi.prototype.deviceTypeControllerUpdateAll = function (where, requestBody, options) {
        return exports.DeviceTypeControllerApiFp(this.configuration).deviceTypeControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeControllerApi
     */
    DeviceTypeControllerApi.prototype.deviceTypeControllerUpdateById = function (id, requestBody, options) {
        return exports.DeviceTypeControllerApiFp(this.configuration).deviceTypeControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return DeviceTypeControllerApi;
}(base_1.BaseAPI));
exports.DeviceTypeControllerApi = DeviceTypeControllerApi;
/**
 * DeviceTypeDeviceControllerApi - axios parameter creator
 * @export
 */
exports.DeviceTypeDeviceControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerCreate: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeDeviceControllerCreate.');
            }
            var localVarPath = "/device-types/{id}/devices"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerDelete: function (id, where, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeDeviceControllerDelete.');
            }
            var localVarPath = "/device-types/{id}/devices"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerFind: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeDeviceControllerFind.');
            }
            var localVarPath = "/device-types/{id}/devices"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerPatch: function (id, where, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeDeviceControllerPatch.');
            }
            var localVarPath = "/device-types/{id}/devices"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * DeviceTypeDeviceControllerApi - functional programming interface
 * @export
 */
exports.DeviceTypeDeviceControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerCreate: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTypeDeviceControllerApiAxiosParamCreator(configuration).deviceTypeDeviceControllerCreate(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerDelete: function (id, where, options) {
            var localVarAxiosArgs = exports.DeviceTypeDeviceControllerApiAxiosParamCreator(configuration).deviceTypeDeviceControllerDelete(id, where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerFind: function (id, filter, options) {
            var localVarAxiosArgs = exports.DeviceTypeDeviceControllerApiAxiosParamCreator(configuration).deviceTypeDeviceControllerFind(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerPatch: function (id, where, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTypeDeviceControllerApiAxiosParamCreator(configuration).deviceTypeDeviceControllerPatch(id, where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * DeviceTypeDeviceControllerApi - factory interface
 * @export
 */
exports.DeviceTypeDeviceControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerCreate: function (id, requestBody, options) {
            return exports.DeviceTypeDeviceControllerApiFp(configuration).deviceTypeDeviceControllerCreate(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerDelete: function (id, where, options) {
            return exports.DeviceTypeDeviceControllerApiFp(configuration).deviceTypeDeviceControllerDelete(id, where, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerFind: function (id, filter, options) {
            return exports.DeviceTypeDeviceControllerApiFp(configuration).deviceTypeDeviceControllerFind(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeDeviceControllerPatch: function (id, where, requestBody, options) {
            return exports.DeviceTypeDeviceControllerApiFp(configuration).deviceTypeDeviceControllerPatch(id, where, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * DeviceTypeDeviceControllerApi - object-oriented interface
 * @export
 * @class DeviceTypeDeviceControllerApi
 * @extends {BaseAPI}
 */
var DeviceTypeDeviceControllerApi = /** @class */ (function (_super) {
    __extends(DeviceTypeDeviceControllerApi, _super);
    function DeviceTypeDeviceControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeDeviceControllerApi
     */
    DeviceTypeDeviceControllerApi.prototype.deviceTypeDeviceControllerCreate = function (id, requestBody, options) {
        return exports.DeviceTypeDeviceControllerApiFp(this.configuration).deviceTypeDeviceControllerCreate(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeDeviceControllerApi
     */
    DeviceTypeDeviceControllerApi.prototype.deviceTypeDeviceControllerDelete = function (id, where, options) {
        return exports.DeviceTypeDeviceControllerApiFp(this.configuration).deviceTypeDeviceControllerDelete(id, where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeDeviceControllerApi
     */
    DeviceTypeDeviceControllerApi.prototype.deviceTypeDeviceControllerFind = function (id, filter, options) {
        return exports.DeviceTypeDeviceControllerApiFp(this.configuration).deviceTypeDeviceControllerFind(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeDeviceControllerApi
     */
    DeviceTypeDeviceControllerApi.prototype.deviceTypeDeviceControllerPatch = function (id, where, requestBody, options) {
        return exports.DeviceTypeDeviceControllerApiFp(this.configuration).deviceTypeDeviceControllerPatch(id, where, requestBody, options)(this.axios, this.basePath);
    };
    return DeviceTypeDeviceControllerApi;
}(base_1.BaseAPI));
exports.DeviceTypeDeviceControllerApi = DeviceTypeDeviceControllerApi;
/**
 * DeviceTypeTagTypeControllerApi - axios parameter creator
 * @export
 */
exports.DeviceTypeTagTypeControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerCreate: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeTagTypeControllerCreate.');
            }
            var localVarPath = "/device-types/{id}/tag-types"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerDelete: function (id, where, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeTagTypeControllerDelete.');
            }
            var localVarPath = "/device-types/{id}/tag-types"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerFind: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeTagTypeControllerFind.');
            }
            var localVarPath = "/device-types/{id}/tag-types"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerPatch: function (id, where, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deviceTypeTagTypeControllerPatch.');
            }
            var localVarPath = "/device-types/{id}/tag-types"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * DeviceTypeTagTypeControllerApi - functional programming interface
 * @export
 */
exports.DeviceTypeTagTypeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerCreate: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTypeTagTypeControllerApiAxiosParamCreator(configuration).deviceTypeTagTypeControllerCreate(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerDelete: function (id, where, options) {
            var localVarAxiosArgs = exports.DeviceTypeTagTypeControllerApiAxiosParamCreator(configuration).deviceTypeTagTypeControllerDelete(id, where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerFind: function (id, filter, options) {
            var localVarAxiosArgs = exports.DeviceTypeTagTypeControllerApiAxiosParamCreator(configuration).deviceTypeTagTypeControllerFind(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerPatch: function (id, where, requestBody, options) {
            var localVarAxiosArgs = exports.DeviceTypeTagTypeControllerApiAxiosParamCreator(configuration).deviceTypeTagTypeControllerPatch(id, where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * DeviceTypeTagTypeControllerApi - factory interface
 * @export
 */
exports.DeviceTypeTagTypeControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerCreate: function (id, requestBody, options) {
            return exports.DeviceTypeTagTypeControllerApiFp(configuration).deviceTypeTagTypeControllerCreate(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerDelete: function (id, where, options) {
            return exports.DeviceTypeTagTypeControllerApiFp(configuration).deviceTypeTagTypeControllerDelete(id, where, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerFind: function (id, filter, options) {
            return exports.DeviceTypeTagTypeControllerApiFp(configuration).deviceTypeTagTypeControllerFind(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTypeTagTypeControllerPatch: function (id, where, requestBody, options) {
            return exports.DeviceTypeTagTypeControllerApiFp(configuration).deviceTypeTagTypeControllerPatch(id, where, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * DeviceTypeTagTypeControllerApi - object-oriented interface
 * @export
 * @class DeviceTypeTagTypeControllerApi
 * @extends {BaseAPI}
 */
var DeviceTypeTagTypeControllerApi = /** @class */ (function (_super) {
    __extends(DeviceTypeTagTypeControllerApi, _super);
    function DeviceTypeTagTypeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeTagTypeControllerApi
     */
    DeviceTypeTagTypeControllerApi.prototype.deviceTypeTagTypeControllerCreate = function (id, requestBody, options) {
        return exports.DeviceTypeTagTypeControllerApiFp(this.configuration).deviceTypeTagTypeControllerCreate(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeTagTypeControllerApi
     */
    DeviceTypeTagTypeControllerApi.prototype.deviceTypeTagTypeControllerDelete = function (id, where, options) {
        return exports.DeviceTypeTagTypeControllerApiFp(this.configuration).deviceTypeTagTypeControllerDelete(id, where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeTagTypeControllerApi
     */
    DeviceTypeTagTypeControllerApi.prototype.deviceTypeTagTypeControllerFind = function (id, filter, options) {
        return exports.DeviceTypeTagTypeControllerApiFp(this.configuration).deviceTypeTagTypeControllerFind(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceTypeTagTypeControllerApi
     */
    DeviceTypeTagTypeControllerApi.prototype.deviceTypeTagTypeControllerPatch = function (id, where, requestBody, options) {
        return exports.DeviceTypeTagTypeControllerApiFp(this.configuration).deviceTypeTagTypeControllerPatch(id, where, requestBody, options)(this.axios, this.basePath);
    };
    return DeviceTypeTagTypeControllerApi;
}(base_1.BaseAPI));
exports.DeviceTypeTagTypeControllerApi = DeviceTypeTagTypeControllerApi;
/**
 * InfoControllerApi - axios parameter creator
 * @export
 */
exports.InfoControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoControllerFind: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/info";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * InfoControllerApi - functional programming interface
 * @export
 */
exports.InfoControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoControllerFind: function (options) {
            var localVarAxiosArgs = exports.InfoControllerApiAxiosParamCreator(configuration).infoControllerFind(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * InfoControllerApi - factory interface
 * @export
 */
exports.InfoControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoControllerFind: function (options) {
            return exports.InfoControllerApiFp(configuration).infoControllerFind(options)(axios, basePath);
        }
    };
};
/**
 * InfoControllerApi - object-oriented interface
 * @export
 * @class InfoControllerApi
 * @extends {BaseAPI}
 */
var InfoControllerApi = /** @class */ (function (_super) {
    __extends(InfoControllerApi, _super);
    function InfoControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoControllerApi
     */
    InfoControllerApi.prototype.infoControllerFind = function (options) {
        return exports.InfoControllerApiFp(this.configuration).infoControllerFind(options)(this.axios, this.basePath);
    };
    return InfoControllerApi;
}(base_1.BaseAPI));
exports.InfoControllerApi = InfoControllerApi;
/**
 * NotificationAlertControllerApi - axios parameter creator
 * @export
 */
exports.NotificationAlertControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationAlertControllerGetAlert: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling notificationAlertControllerGetAlert.');
            }
            var localVarPath = "/notifications/{id}/alert"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * NotificationAlertControllerApi - functional programming interface
 * @export
 */
exports.NotificationAlertControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationAlertControllerGetAlert: function (id, options) {
            var localVarAxiosArgs = exports.NotificationAlertControllerApiAxiosParamCreator(configuration).notificationAlertControllerGetAlert(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * NotificationAlertControllerApi - factory interface
 * @export
 */
exports.NotificationAlertControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationAlertControllerGetAlert: function (id, options) {
            return exports.NotificationAlertControllerApiFp(configuration).notificationAlertControllerGetAlert(id, options)(axios, basePath);
        }
    };
};
/**
 * NotificationAlertControllerApi - object-oriented interface
 * @export
 * @class NotificationAlertControllerApi
 * @extends {BaseAPI}
 */
var NotificationAlertControllerApi = /** @class */ (function (_super) {
    __extends(NotificationAlertControllerApi, _super);
    function NotificationAlertControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationAlertControllerApi
     */
    NotificationAlertControllerApi.prototype.notificationAlertControllerGetAlert = function (id, options) {
        return exports.NotificationAlertControllerApiFp(this.configuration).notificationAlertControllerGetAlert(id, options)(this.axios, this.basePath);
    };
    return NotificationAlertControllerApi;
}(base_1.BaseAPI));
exports.NotificationAlertControllerApi = NotificationAlertControllerApi;
/**
 * NotificationControllerApi - axios parameter creator
 * @export
 */
exports.NotificationControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/notifications/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/notifications";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerDeleteAll: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/notifications/all";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling notificationControllerDeleteById.');
            }
            var localVarPath = "/notifications/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {NotificationFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/notifications";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {NotificationFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling notificationControllerFindById.');
            }
            var localVarPath = "/notifications/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling notificationControllerReplaceById.');
            }
            var localVarPath = "/notifications/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/notifications";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling notificationControllerUpdateById.');
            }
            var localVarPath = "/notifications/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * NotificationControllerApi - functional programming interface
 * @export
 */
exports.NotificationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.NotificationControllerApiAxiosParamCreator(configuration).notificationControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.NotificationControllerApiAxiosParamCreator(configuration).notificationControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerDeleteAll: function (options) {
            var localVarAxiosArgs = exports.NotificationControllerApiAxiosParamCreator(configuration).notificationControllerDeleteAll(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.NotificationControllerApiAxiosParamCreator(configuration).notificationControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {NotificationFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.NotificationControllerApiAxiosParamCreator(configuration).notificationControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {NotificationFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.NotificationControllerApiAxiosParamCreator(configuration).notificationControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.NotificationControllerApiAxiosParamCreator(configuration).notificationControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.NotificationControllerApiAxiosParamCreator(configuration).notificationControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.NotificationControllerApiAxiosParamCreator(configuration).notificationControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * NotificationControllerApi - factory interface
 * @export
 */
exports.NotificationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCount: function (where, options) {
            return exports.NotificationControllerApiFp(configuration).notificationControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreate: function (requestBody, options) {
            return exports.NotificationControllerApiFp(configuration).notificationControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerDeleteAll: function (options) {
            return exports.NotificationControllerApiFp(configuration).notificationControllerDeleteAll(options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerDeleteById: function (id, options) {
            return exports.NotificationControllerApiFp(configuration).notificationControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {NotificationFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFind: function (filter, options) {
            return exports.NotificationControllerApiFp(configuration).notificationControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {NotificationFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerFindById: function (id, filter, options) {
            return exports.NotificationControllerApiFp(configuration).notificationControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerReplaceById: function (id, requestBody, options) {
            return exports.NotificationControllerApiFp(configuration).notificationControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerUpdateAll: function (where, requestBody, options) {
            return exports.NotificationControllerApiFp(configuration).notificationControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerUpdateById: function (id, requestBody, options) {
            return exports.NotificationControllerApiFp(configuration).notificationControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * NotificationControllerApi - object-oriented interface
 * @export
 * @class NotificationControllerApi
 * @extends {BaseAPI}
 */
var NotificationControllerApi = /** @class */ (function (_super) {
    __extends(NotificationControllerApi, _super);
    function NotificationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    NotificationControllerApi.prototype.notificationControllerCount = function (where, options) {
        return exports.NotificationControllerApiFp(this.configuration).notificationControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    NotificationControllerApi.prototype.notificationControllerCreate = function (requestBody, options) {
        return exports.NotificationControllerApiFp(this.configuration).notificationControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    NotificationControllerApi.prototype.notificationControllerDeleteAll = function (options) {
        return exports.NotificationControllerApiFp(this.configuration).notificationControllerDeleteAll(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    NotificationControllerApi.prototype.notificationControllerDeleteById = function (id, options) {
        return exports.NotificationControllerApiFp(this.configuration).notificationControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {NotificationFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    NotificationControllerApi.prototype.notificationControllerFind = function (filter, options) {
        return exports.NotificationControllerApiFp(this.configuration).notificationControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {NotificationFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    NotificationControllerApi.prototype.notificationControllerFindById = function (id, filter, options) {
        return exports.NotificationControllerApiFp(this.configuration).notificationControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    NotificationControllerApi.prototype.notificationControllerReplaceById = function (id, requestBody, options) {
        return exports.NotificationControllerApiFp(this.configuration).notificationControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    NotificationControllerApi.prototype.notificationControllerUpdateAll = function (where, requestBody, options) {
        return exports.NotificationControllerApiFp(this.configuration).notificationControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    NotificationControllerApi.prototype.notificationControllerUpdateById = function (id, requestBody, options) {
        return exports.NotificationControllerApiFp(this.configuration).notificationControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return NotificationControllerApi;
}(base_1.BaseAPI));
exports.NotificationControllerApi = NotificationControllerApi;
/**
 * SettingControllerApi - axios parameter creator
 * @export
 */
exports.SettingControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/settings/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/settings";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling settingControllerDeleteById.');
            }
            var localVarPath = "/settings/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {SettingFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/settings";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {SettingFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling settingControllerFindById.');
            }
            var localVarPath = "/settings/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling settingControllerReplaceById.');
            }
            var localVarPath = "/settings/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/settings";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling settingControllerUpdateById.');
            }
            var localVarPath = "/settings/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * SettingControllerApi - functional programming interface
 * @export
 */
exports.SettingControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.SettingControllerApiAxiosParamCreator(configuration).settingControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.SettingControllerApiAxiosParamCreator(configuration).settingControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.SettingControllerApiAxiosParamCreator(configuration).settingControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {SettingFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.SettingControllerApiAxiosParamCreator(configuration).settingControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {SettingFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.SettingControllerApiAxiosParamCreator(configuration).settingControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.SettingControllerApiAxiosParamCreator(configuration).settingControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.SettingControllerApiAxiosParamCreator(configuration).settingControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.SettingControllerApiAxiosParamCreator(configuration).settingControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * SettingControllerApi - factory interface
 * @export
 */
exports.SettingControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerCount: function (where, options) {
            return exports.SettingControllerApiFp(configuration).settingControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerCreate: function (requestBody, options) {
            return exports.SettingControllerApiFp(configuration).settingControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerDeleteById: function (id, options) {
            return exports.SettingControllerApiFp(configuration).settingControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {SettingFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerFind: function (filter, options) {
            return exports.SettingControllerApiFp(configuration).settingControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {SettingFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerFindById: function (id, filter, options) {
            return exports.SettingControllerApiFp(configuration).settingControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerReplaceById: function (id, requestBody, options) {
            return exports.SettingControllerApiFp(configuration).settingControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerUpdateAll: function (where, requestBody, options) {
            return exports.SettingControllerApiFp(configuration).settingControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingControllerUpdateById: function (id, requestBody, options) {
            return exports.SettingControllerApiFp(configuration).settingControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * SettingControllerApi - object-oriented interface
 * @export
 * @class SettingControllerApi
 * @extends {BaseAPI}
 */
var SettingControllerApi = /** @class */ (function (_super) {
    __extends(SettingControllerApi, _super);
    function SettingControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    SettingControllerApi.prototype.settingControllerCount = function (where, options) {
        return exports.SettingControllerApiFp(this.configuration).settingControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    SettingControllerApi.prototype.settingControllerCreate = function (requestBody, options) {
        return exports.SettingControllerApiFp(this.configuration).settingControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    SettingControllerApi.prototype.settingControllerDeleteById = function (id, options) {
        return exports.SettingControllerApiFp(this.configuration).settingControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {SettingFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    SettingControllerApi.prototype.settingControllerFind = function (filter, options) {
        return exports.SettingControllerApiFp(this.configuration).settingControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {SettingFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    SettingControllerApi.prototype.settingControllerFindById = function (id, filter, options) {
        return exports.SettingControllerApiFp(this.configuration).settingControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    SettingControllerApi.prototype.settingControllerReplaceById = function (id, requestBody, options) {
        return exports.SettingControllerApiFp(this.configuration).settingControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    SettingControllerApi.prototype.settingControllerUpdateAll = function (where, requestBody, options) {
        return exports.SettingControllerApiFp(this.configuration).settingControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingControllerApi
     */
    SettingControllerApi.prototype.settingControllerUpdateById = function (id, requestBody, options) {
        return exports.SettingControllerApiFp(this.configuration).settingControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return SettingControllerApi;
}(base_1.BaseAPI));
exports.SettingControllerApi = SettingControllerApi;
/**
 * TagAlertControllerApi - axios parameter creator
 * @export
 */
exports.TagAlertControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerCreate: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagAlertControllerCreate.');
            }
            var localVarPath = "/tags/{id}/alerts"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerDelete: function (id, where, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagAlertControllerDelete.');
            }
            var localVarPath = "/tags/{id}/alerts"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerFind: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagAlertControllerFind.');
            }
            var localVarPath = "/tags/{id}/alerts"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerPatch: function (id, where, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagAlertControllerPatch.');
            }
            var localVarPath = "/tags/{id}/alerts"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TagAlertControllerApi - functional programming interface
 * @export
 */
exports.TagAlertControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerCreate: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.TagAlertControllerApiAxiosParamCreator(configuration).tagAlertControllerCreate(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerDelete: function (id, where, options) {
            var localVarAxiosArgs = exports.TagAlertControllerApiAxiosParamCreator(configuration).tagAlertControllerDelete(id, where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerFind: function (id, filter, options) {
            var localVarAxiosArgs = exports.TagAlertControllerApiAxiosParamCreator(configuration).tagAlertControllerFind(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerPatch: function (id, where, requestBody, options) {
            var localVarAxiosArgs = exports.TagAlertControllerApiAxiosParamCreator(configuration).tagAlertControllerPatch(id, where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TagAlertControllerApi - factory interface
 * @export
 */
exports.TagAlertControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerCreate: function (id, requestBody, options) {
            return exports.TagAlertControllerApiFp(configuration).tagAlertControllerCreate(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerDelete: function (id, where, options) {
            return exports.TagAlertControllerApiFp(configuration).tagAlertControllerDelete(id, where, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerFind: function (id, filter, options) {
            return exports.TagAlertControllerApiFp(configuration).tagAlertControllerFind(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAlertControllerPatch: function (id, where, requestBody, options) {
            return exports.TagAlertControllerApiFp(configuration).tagAlertControllerPatch(id, where, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * TagAlertControllerApi - object-oriented interface
 * @export
 * @class TagAlertControllerApi
 * @extends {BaseAPI}
 */
var TagAlertControllerApi = /** @class */ (function (_super) {
    __extends(TagAlertControllerApi, _super);
    function TagAlertControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagAlertControllerApi
     */
    TagAlertControllerApi.prototype.tagAlertControllerCreate = function (id, requestBody, options) {
        return exports.TagAlertControllerApiFp(this.configuration).tagAlertControllerCreate(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagAlertControllerApi
     */
    TagAlertControllerApi.prototype.tagAlertControllerDelete = function (id, where, options) {
        return exports.TagAlertControllerApiFp(this.configuration).tagAlertControllerDelete(id, where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagAlertControllerApi
     */
    TagAlertControllerApi.prototype.tagAlertControllerFind = function (id, filter, options) {
        return exports.TagAlertControllerApiFp(this.configuration).tagAlertControllerFind(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagAlertControllerApi
     */
    TagAlertControllerApi.prototype.tagAlertControllerPatch = function (id, where, requestBody, options) {
        return exports.TagAlertControllerApiFp(this.configuration).tagAlertControllerPatch(id, where, requestBody, options)(this.axios, this.basePath);
    };
    return TagAlertControllerApi;
}(base_1.BaseAPI));
exports.TagAlertControllerApi = TagAlertControllerApi;
/**
 * TagControllerApi - axios parameter creator
 * @export
 */
exports.TagControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tags/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tags";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerDeleteAll: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tags/all";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagControllerDeleteById.');
            }
            var localVarPath = "/tags/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {TagFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tags";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {TagFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagControllerFindById.');
            }
            var localVarPath = "/tags/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagControllerReplaceById.');
            }
            var localVarPath = "/tags/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tags";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagControllerUpdateById.');
            }
            var localVarPath = "/tags/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TagControllerApi - functional programming interface
 * @export
 */
exports.TagControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.TagControllerApiAxiosParamCreator(configuration).tagControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.TagControllerApiAxiosParamCreator(configuration).tagControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerDeleteAll: function (options) {
            var localVarAxiosArgs = exports.TagControllerApiAxiosParamCreator(configuration).tagControllerDeleteAll(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.TagControllerApiAxiosParamCreator(configuration).tagControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {TagFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.TagControllerApiAxiosParamCreator(configuration).tagControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {TagFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.TagControllerApiAxiosParamCreator(configuration).tagControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.TagControllerApiAxiosParamCreator(configuration).tagControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.TagControllerApiAxiosParamCreator(configuration).tagControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.TagControllerApiAxiosParamCreator(configuration).tagControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TagControllerApi - factory interface
 * @export
 */
exports.TagControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerCount: function (where, options) {
            return exports.TagControllerApiFp(configuration).tagControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerCreate: function (requestBody, options) {
            return exports.TagControllerApiFp(configuration).tagControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerDeleteAll: function (options) {
            return exports.TagControllerApiFp(configuration).tagControllerDeleteAll(options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerDeleteById: function (id, options) {
            return exports.TagControllerApiFp(configuration).tagControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {TagFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerFind: function (filter, options) {
            return exports.TagControllerApiFp(configuration).tagControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {TagFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerFindById: function (id, filter, options) {
            return exports.TagControllerApiFp(configuration).tagControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerReplaceById: function (id, requestBody, options) {
            return exports.TagControllerApiFp(configuration).tagControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerUpdateAll: function (where, requestBody, options) {
            return exports.TagControllerApiFp(configuration).tagControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagControllerUpdateById: function (id, requestBody, options) {
            return exports.TagControllerApiFp(configuration).tagControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * TagControllerApi - object-oriented interface
 * @export
 * @class TagControllerApi
 * @extends {BaseAPI}
 */
var TagControllerApi = /** @class */ (function (_super) {
    __extends(TagControllerApi, _super);
    function TagControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    TagControllerApi.prototype.tagControllerCount = function (where, options) {
        return exports.TagControllerApiFp(this.configuration).tagControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    TagControllerApi.prototype.tagControllerCreate = function (requestBody, options) {
        return exports.TagControllerApiFp(this.configuration).tagControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    TagControllerApi.prototype.tagControllerDeleteAll = function (options) {
        return exports.TagControllerApiFp(this.configuration).tagControllerDeleteAll(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    TagControllerApi.prototype.tagControllerDeleteById = function (id, options) {
        return exports.TagControllerApiFp(this.configuration).tagControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {TagFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    TagControllerApi.prototype.tagControllerFind = function (filter, options) {
        return exports.TagControllerApiFp(this.configuration).tagControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {TagFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    TagControllerApi.prototype.tagControllerFindById = function (id, filter, options) {
        return exports.TagControllerApiFp(this.configuration).tagControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    TagControllerApi.prototype.tagControllerReplaceById = function (id, requestBody, options) {
        return exports.TagControllerApiFp(this.configuration).tagControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    TagControllerApi.prototype.tagControllerUpdateAll = function (where, requestBody, options) {
        return exports.TagControllerApiFp(this.configuration).tagControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    TagControllerApi.prototype.tagControllerUpdateById = function (id, requestBody, options) {
        return exports.TagControllerApiFp(this.configuration).tagControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return TagControllerApi;
}(base_1.BaseAPI));
exports.TagControllerApi = TagControllerApi;
/**
 * TagDeviceControllerApi - axios parameter creator
 * @export
 */
exports.TagDeviceControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagDeviceControllerGetDevice: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagDeviceControllerGetDevice.');
            }
            var localVarPath = "/tags/{id}/device"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TagDeviceControllerApi - functional programming interface
 * @export
 */
exports.TagDeviceControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagDeviceControllerGetDevice: function (id, options) {
            var localVarAxiosArgs = exports.TagDeviceControllerApiAxiosParamCreator(configuration).tagDeviceControllerGetDevice(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TagDeviceControllerApi - factory interface
 * @export
 */
exports.TagDeviceControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagDeviceControllerGetDevice: function (id, options) {
            return exports.TagDeviceControllerApiFp(configuration).tagDeviceControllerGetDevice(id, options)(axios, basePath);
        }
    };
};
/**
 * TagDeviceControllerApi - object-oriented interface
 * @export
 * @class TagDeviceControllerApi
 * @extends {BaseAPI}
 */
var TagDeviceControllerApi = /** @class */ (function (_super) {
    __extends(TagDeviceControllerApi, _super);
    function TagDeviceControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagDeviceControllerApi
     */
    TagDeviceControllerApi.prototype.tagDeviceControllerGetDevice = function (id, options) {
        return exports.TagDeviceControllerApiFp(this.configuration).tagDeviceControllerGetDevice(id, options)(this.axios, this.basePath);
    };
    return TagDeviceControllerApi;
}(base_1.BaseAPI));
exports.TagDeviceControllerApi = TagDeviceControllerApi;
/**
 * TagGroupControllerApi - axios parameter creator
 * @export
 */
exports.TagGroupControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerCommit: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-groups/commit";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-groups/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-groups";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerDeleteAll: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-groups/all";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupControllerDeleteById.');
            }
            var localVarPath = "/tag-groups/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {TagGroupFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-groups";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFindAllWithRelation: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupControllerFindAllWithRelation.');
            }
            var localVarPath = "/all-tag-groups/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFindAllWithRelationTopLevel: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/all-tag-groups-top-level";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {TagGroupFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupControllerFindById.');
            }
            var localVarPath = "/tag-groups/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupControllerReplaceById.');
            }
            var localVarPath = "/tag-groups/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-groups";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupControllerUpdateById.');
            }
            var localVarPath = "/tag-groups/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TagGroupControllerApi - functional programming interface
 * @export
 */
exports.TagGroupControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerCommit: function (options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerCommit(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerDeleteAll: function (options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerDeleteAll(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {TagGroupFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFindAllWithRelation: function (id, options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerFindAllWithRelation(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFindAllWithRelationTopLevel: function (options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerFindAllWithRelationTopLevel(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {TagGroupFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.TagGroupControllerApiAxiosParamCreator(configuration).tagGroupControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TagGroupControllerApi - factory interface
 * @export
 */
exports.TagGroupControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerCommit: function (options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerCommit(options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerCount: function (where, options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerCreate: function (requestBody, options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerDeleteAll: function (options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerDeleteAll(options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerDeleteById: function (id, options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {TagGroupFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFind: function (filter, options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFindAllWithRelation: function (id, options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerFindAllWithRelation(id, options)(axios, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFindAllWithRelationTopLevel: function (options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerFindAllWithRelationTopLevel(options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {TagGroupFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerFindById: function (id, filter, options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerReplaceById: function (id, requestBody, options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerUpdateAll: function (where, requestBody, options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupControllerUpdateById: function (id, requestBody, options) {
            return exports.TagGroupControllerApiFp(configuration).tagGroupControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * TagGroupControllerApi - object-oriented interface
 * @export
 * @class TagGroupControllerApi
 * @extends {BaseAPI}
 */
var TagGroupControllerApi = /** @class */ (function (_super) {
    __extends(TagGroupControllerApi, _super);
    function TagGroupControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerCommit = function (options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerCommit(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerCount = function (where, options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerCreate = function (requestBody, options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerDeleteAll = function (options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerDeleteAll(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerDeleteById = function (id, options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {TagGroupFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerFind = function (filter, options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerFindAllWithRelation = function (id, options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerFindAllWithRelation(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerFindAllWithRelationTopLevel = function (options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerFindAllWithRelationTopLevel(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {TagGroupFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerFindById = function (id, filter, options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerReplaceById = function (id, requestBody, options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerUpdateAll = function (where, requestBody, options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupControllerApi
     */
    TagGroupControllerApi.prototype.tagGroupControllerUpdateById = function (id, requestBody, options) {
        return exports.TagGroupControllerApiFp(this.configuration).tagGroupControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return TagGroupControllerApi;
}(base_1.BaseAPI));
exports.TagGroupControllerApi = TagGroupControllerApi;
/**
 * TagGroupTagControllerApi - axios parameter creator
 * @export
 */
exports.TagGroupTagControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerCreate: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupTagControllerCreate.');
            }
            var localVarPath = "/tag-groups/{id}/tags"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerDelete: function (id, where, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupTagControllerDelete.');
            }
            var localVarPath = "/tag-groups/{id}/tags"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerFind: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupTagControllerFind.');
            }
            var localVarPath = "/tag-groups/{id}/tags"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerPatch: function (id, where, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupTagControllerPatch.');
            }
            var localVarPath = "/tag-groups/{id}/tags"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TagGroupTagControllerApi - functional programming interface
 * @export
 */
exports.TagGroupTagControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerCreate: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.TagGroupTagControllerApiAxiosParamCreator(configuration).tagGroupTagControllerCreate(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerDelete: function (id, where, options) {
            var localVarAxiosArgs = exports.TagGroupTagControllerApiAxiosParamCreator(configuration).tagGroupTagControllerDelete(id, where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerFind: function (id, filter, options) {
            var localVarAxiosArgs = exports.TagGroupTagControllerApiAxiosParamCreator(configuration).tagGroupTagControllerFind(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerPatch: function (id, where, requestBody, options) {
            var localVarAxiosArgs = exports.TagGroupTagControllerApiAxiosParamCreator(configuration).tagGroupTagControllerPatch(id, where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TagGroupTagControllerApi - factory interface
 * @export
 */
exports.TagGroupTagControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerCreate: function (id, requestBody, options) {
            return exports.TagGroupTagControllerApiFp(configuration).tagGroupTagControllerCreate(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerDelete: function (id, where, options) {
            return exports.TagGroupTagControllerApiFp(configuration).tagGroupTagControllerDelete(id, where, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerFind: function (id, filter, options) {
            return exports.TagGroupTagControllerApiFp(configuration).tagGroupTagControllerFind(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagControllerPatch: function (id, where, requestBody, options) {
            return exports.TagGroupTagControllerApiFp(configuration).tagGroupTagControllerPatch(id, where, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * TagGroupTagControllerApi - object-oriented interface
 * @export
 * @class TagGroupTagControllerApi
 * @extends {BaseAPI}
 */
var TagGroupTagControllerApi = /** @class */ (function (_super) {
    __extends(TagGroupTagControllerApi, _super);
    function TagGroupTagControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupTagControllerApi
     */
    TagGroupTagControllerApi.prototype.tagGroupTagControllerCreate = function (id, requestBody, options) {
        return exports.TagGroupTagControllerApiFp(this.configuration).tagGroupTagControllerCreate(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupTagControllerApi
     */
    TagGroupTagControllerApi.prototype.tagGroupTagControllerDelete = function (id, where, options) {
        return exports.TagGroupTagControllerApiFp(this.configuration).tagGroupTagControllerDelete(id, where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupTagControllerApi
     */
    TagGroupTagControllerApi.prototype.tagGroupTagControllerFind = function (id, filter, options) {
        return exports.TagGroupTagControllerApiFp(this.configuration).tagGroupTagControllerFind(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupTagControllerApi
     */
    TagGroupTagControllerApi.prototype.tagGroupTagControllerPatch = function (id, where, requestBody, options) {
        return exports.TagGroupTagControllerApiFp(this.configuration).tagGroupTagControllerPatch(id, where, requestBody, options)(this.axios, this.basePath);
    };
    return TagGroupTagControllerApi;
}(base_1.BaseAPI));
exports.TagGroupTagControllerApi = TagGroupTagControllerApi;
/**
 * TagGroupTagGroupControllerApi - axios parameter creator
 * @export
 */
exports.TagGroupTagGroupControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerCreate: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupTagGroupControllerCreate.');
            }
            var localVarPath = "/tag-groups/{id}/tag-groups"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerDelete: function (id, where, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupTagGroupControllerDelete.');
            }
            var localVarPath = "/tag-groups/{id}/tag-groups"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerFind: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupTagGroupControllerFind.');
            }
            var localVarPath = "/tag-groups/{id}/tag-groups"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerPatch: function (id, where, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagGroupTagGroupControllerPatch.');
            }
            var localVarPath = "/tag-groups/{id}/tag-groups"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TagGroupTagGroupControllerApi - functional programming interface
 * @export
 */
exports.TagGroupTagGroupControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerCreate: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.TagGroupTagGroupControllerApiAxiosParamCreator(configuration).tagGroupTagGroupControllerCreate(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerDelete: function (id, where, options) {
            var localVarAxiosArgs = exports.TagGroupTagGroupControllerApiAxiosParamCreator(configuration).tagGroupTagGroupControllerDelete(id, where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerFind: function (id, filter, options) {
            var localVarAxiosArgs = exports.TagGroupTagGroupControllerApiAxiosParamCreator(configuration).tagGroupTagGroupControllerFind(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerPatch: function (id, where, requestBody, options) {
            var localVarAxiosArgs = exports.TagGroupTagGroupControllerApiAxiosParamCreator(configuration).tagGroupTagGroupControllerPatch(id, where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TagGroupTagGroupControllerApi - factory interface
 * @export
 */
exports.TagGroupTagGroupControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerCreate: function (id, requestBody, options) {
            return exports.TagGroupTagGroupControllerApiFp(configuration).tagGroupTagGroupControllerCreate(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerDelete: function (id, where, options) {
            return exports.TagGroupTagGroupControllerApiFp(configuration).tagGroupTagGroupControllerDelete(id, where, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerFind: function (id, filter, options) {
            return exports.TagGroupTagGroupControllerApiFp(configuration).tagGroupTagGroupControllerFind(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagGroupTagGroupControllerPatch: function (id, where, requestBody, options) {
            return exports.TagGroupTagGroupControllerApiFp(configuration).tagGroupTagGroupControllerPatch(id, where, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * TagGroupTagGroupControllerApi - object-oriented interface
 * @export
 * @class TagGroupTagGroupControllerApi
 * @extends {BaseAPI}
 */
var TagGroupTagGroupControllerApi = /** @class */ (function (_super) {
    __extends(TagGroupTagGroupControllerApi, _super);
    function TagGroupTagGroupControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupTagGroupControllerApi
     */
    TagGroupTagGroupControllerApi.prototype.tagGroupTagGroupControllerCreate = function (id, requestBody, options) {
        return exports.TagGroupTagGroupControllerApiFp(this.configuration).tagGroupTagGroupControllerCreate(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupTagGroupControllerApi
     */
    TagGroupTagGroupControllerApi.prototype.tagGroupTagGroupControllerDelete = function (id, where, options) {
        return exports.TagGroupTagGroupControllerApiFp(this.configuration).tagGroupTagGroupControllerDelete(id, where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupTagGroupControllerApi
     */
    TagGroupTagGroupControllerApi.prototype.tagGroupTagGroupControllerFind = function (id, filter, options) {
        return exports.TagGroupTagGroupControllerApiFp(this.configuration).tagGroupTagGroupControllerFind(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagGroupTagGroupControllerApi
     */
    TagGroupTagGroupControllerApi.prototype.tagGroupTagGroupControllerPatch = function (id, where, requestBody, options) {
        return exports.TagGroupTagGroupControllerApiFp(this.configuration).tagGroupTagGroupControllerPatch(id, where, requestBody, options)(this.axios, this.basePath);
    };
    return TagGroupTagGroupControllerApi;
}(base_1.BaseAPI));
exports.TagGroupTagGroupControllerApi = TagGroupTagGroupControllerApi;
/**
 * TagTagGroupControllerApi - axios parameter creator
 * @export
 */
exports.TagTagGroupControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTagGroupControllerGetTagGroup: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagTagGroupControllerGetTagGroup.');
            }
            var localVarPath = "/tags/{id}/tag-group"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TagTagGroupControllerApi - functional programming interface
 * @export
 */
exports.TagTagGroupControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTagGroupControllerGetTagGroup: function (id, options) {
            var localVarAxiosArgs = exports.TagTagGroupControllerApiAxiosParamCreator(configuration).tagTagGroupControllerGetTagGroup(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TagTagGroupControllerApi - factory interface
 * @export
 */
exports.TagTagGroupControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTagGroupControllerGetTagGroup: function (id, options) {
            return exports.TagTagGroupControllerApiFp(configuration).tagTagGroupControllerGetTagGroup(id, options)(axios, basePath);
        }
    };
};
/**
 * TagTagGroupControllerApi - object-oriented interface
 * @export
 * @class TagTagGroupControllerApi
 * @extends {BaseAPI}
 */
var TagTagGroupControllerApi = /** @class */ (function (_super) {
    __extends(TagTagGroupControllerApi, _super);
    function TagTagGroupControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTagGroupControllerApi
     */
    TagTagGroupControllerApi.prototype.tagTagGroupControllerGetTagGroup = function (id, options) {
        return exports.TagTagGroupControllerApiFp(this.configuration).tagTagGroupControllerGetTagGroup(id, options)(this.axios, this.basePath);
    };
    return TagTagGroupControllerApi;
}(base_1.BaseAPI));
exports.TagTagGroupControllerApi = TagTagGroupControllerApi;
/**
 * TagTagTypeControllerApi - axios parameter creator
 * @export
 */
exports.TagTagTypeControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTagTypeControllerGetTagType: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagTagTypeControllerGetTagType.');
            }
            var localVarPath = "/tags/{id}/tag-type"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TagTagTypeControllerApi - functional programming interface
 * @export
 */
exports.TagTagTypeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTagTypeControllerGetTagType: function (id, options) {
            var localVarAxiosArgs = exports.TagTagTypeControllerApiAxiosParamCreator(configuration).tagTagTypeControllerGetTagType(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TagTagTypeControllerApi - factory interface
 * @export
 */
exports.TagTagTypeControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTagTypeControllerGetTagType: function (id, options) {
            return exports.TagTagTypeControllerApiFp(configuration).tagTagTypeControllerGetTagType(id, options)(axios, basePath);
        }
    };
};
/**
 * TagTagTypeControllerApi - object-oriented interface
 * @export
 * @class TagTagTypeControllerApi
 * @extends {BaseAPI}
 */
var TagTagTypeControllerApi = /** @class */ (function (_super) {
    __extends(TagTagTypeControllerApi, _super);
    function TagTagTypeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTagTypeControllerApi
     */
    TagTagTypeControllerApi.prototype.tagTagTypeControllerGetTagType = function (id, options) {
        return exports.TagTagTypeControllerApiFp(this.configuration).tagTagTypeControllerGetTagType(id, options)(this.axios, this.basePath);
    };
    return TagTagTypeControllerApi;
}(base_1.BaseAPI));
exports.TagTagTypeControllerApi = TagTagTypeControllerApi;
/**
 * TagTypeControllerApi - axios parameter creator
 * @export
 */
exports.TagTypeControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-types/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-types";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerDeleteAll: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-types/all";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagTypeControllerDeleteById.');
            }
            var localVarPath = "/tag-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {TagTypeFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-types";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {TagTypeFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagTypeControllerFindById.');
            }
            var localVarPath = "/tag-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagTypeControllerReplaceById.');
            }
            var localVarPath = "/tag-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tag-types";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling tagTypeControllerUpdateById.');
            }
            var localVarPath = "/tag-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TagTypeControllerApi - functional programming interface
 * @export
 */
exports.TagTypeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.TagTypeControllerApiAxiosParamCreator(configuration).tagTypeControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.TagTypeControllerApiAxiosParamCreator(configuration).tagTypeControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerDeleteAll: function (options) {
            var localVarAxiosArgs = exports.TagTypeControllerApiAxiosParamCreator(configuration).tagTypeControllerDeleteAll(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.TagTypeControllerApiAxiosParamCreator(configuration).tagTypeControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {TagTypeFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.TagTypeControllerApiAxiosParamCreator(configuration).tagTypeControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {TagTypeFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.TagTypeControllerApiAxiosParamCreator(configuration).tagTypeControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.TagTypeControllerApiAxiosParamCreator(configuration).tagTypeControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.TagTypeControllerApiAxiosParamCreator(configuration).tagTypeControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.TagTypeControllerApiAxiosParamCreator(configuration).tagTypeControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * TagTypeControllerApi - factory interface
 * @export
 */
exports.TagTypeControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerCount: function (where, options) {
            return exports.TagTypeControllerApiFp(configuration).tagTypeControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerCreate: function (requestBody, options) {
            return exports.TagTypeControllerApiFp(configuration).tagTypeControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerDeleteAll: function (options) {
            return exports.TagTypeControllerApiFp(configuration).tagTypeControllerDeleteAll(options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerDeleteById: function (id, options) {
            return exports.TagTypeControllerApiFp(configuration).tagTypeControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {TagTypeFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerFind: function (filter, options) {
            return exports.TagTypeControllerApiFp(configuration).tagTypeControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {TagTypeFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerFindById: function (id, filter, options) {
            return exports.TagTypeControllerApiFp(configuration).tagTypeControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerReplaceById: function (id, requestBody, options) {
            return exports.TagTypeControllerApiFp(configuration).tagTypeControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerUpdateAll: function (where, requestBody, options) {
            return exports.TagTypeControllerApiFp(configuration).tagTypeControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagTypeControllerUpdateById: function (id, requestBody, options) {
            return exports.TagTypeControllerApiFp(configuration).tagTypeControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * TagTypeControllerApi - object-oriented interface
 * @export
 * @class TagTypeControllerApi
 * @extends {BaseAPI}
 */
var TagTypeControllerApi = /** @class */ (function (_super) {
    __extends(TagTypeControllerApi, _super);
    function TagTypeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTypeControllerApi
     */
    TagTypeControllerApi.prototype.tagTypeControllerCount = function (where, options) {
        return exports.TagTypeControllerApiFp(this.configuration).tagTypeControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTypeControllerApi
     */
    TagTypeControllerApi.prototype.tagTypeControllerCreate = function (requestBody, options) {
        return exports.TagTypeControllerApiFp(this.configuration).tagTypeControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTypeControllerApi
     */
    TagTypeControllerApi.prototype.tagTypeControllerDeleteAll = function (options) {
        return exports.TagTypeControllerApiFp(this.configuration).tagTypeControllerDeleteAll(options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTypeControllerApi
     */
    TagTypeControllerApi.prototype.tagTypeControllerDeleteById = function (id, options) {
        return exports.TagTypeControllerApiFp(this.configuration).tagTypeControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {TagTypeFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTypeControllerApi
     */
    TagTypeControllerApi.prototype.tagTypeControllerFind = function (filter, options) {
        return exports.TagTypeControllerApiFp(this.configuration).tagTypeControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {TagTypeFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTypeControllerApi
     */
    TagTypeControllerApi.prototype.tagTypeControllerFindById = function (id, filter, options) {
        return exports.TagTypeControllerApiFp(this.configuration).tagTypeControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTypeControllerApi
     */
    TagTypeControllerApi.prototype.tagTypeControllerReplaceById = function (id, requestBody, options) {
        return exports.TagTypeControllerApiFp(this.configuration).tagTypeControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTypeControllerApi
     */
    TagTypeControllerApi.prototype.tagTypeControllerUpdateAll = function (where, requestBody, options) {
        return exports.TagTypeControllerApiFp(this.configuration).tagTypeControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTypeControllerApi
     */
    TagTypeControllerApi.prototype.tagTypeControllerUpdateById = function (id, requestBody, options) {
        return exports.TagTypeControllerApiFp(this.configuration).tagTypeControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return TagTypeControllerApi;
}(base_1.BaseAPI));
exports.TagTypeControllerApi = TagTypeControllerApi;
/**
 * UserControllerApi - axios parameter creator
 * @export
 */
exports.UserControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCount: function (where, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/users/count";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreate: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/users";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteById: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling userControllerDeleteById.');
            }
            var localVarPath = "/users/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UserFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFind: function (filter, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/users";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {UserFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindById: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling userControllerFindById.');
            }
            var localVarPath = "/users/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLogin: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/users/login";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerReplaceById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling userControllerReplaceById.');
            }
            var localVarPath = "/users/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateAll: function (where, requestBody, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/users";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateById: function (id, requestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling userControllerUpdateById.');
            }
            var localVarPath = "/users/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * UserControllerApi - functional programming interface
 * @export
 */
exports.UserControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCount: function (where, options) {
            var localVarAxiosArgs = exports.UserControllerApiAxiosParamCreator(configuration).userControllerCount(where, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreate: function (requestBody, options) {
            var localVarAxiosArgs = exports.UserControllerApiAxiosParamCreator(configuration).userControllerCreate(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteById: function (id, options) {
            var localVarAxiosArgs = exports.UserControllerApiAxiosParamCreator(configuration).userControllerDeleteById(id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {UserFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFind: function (filter, options) {
            var localVarAxiosArgs = exports.UserControllerApiAxiosParamCreator(configuration).userControllerFind(filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {UserFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindById: function (id, filter, options) {
            var localVarAxiosArgs = exports.UserControllerApiAxiosParamCreator(configuration).userControllerFindById(id, filter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLogin: function (requestBody, options) {
            var localVarAxiosArgs = exports.UserControllerApiAxiosParamCreator(configuration).userControllerLogin(requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerReplaceById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.UserControllerApiAxiosParamCreator(configuration).userControllerReplaceById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateAll: function (where, requestBody, options) {
            var localVarAxiosArgs = exports.UserControllerApiAxiosParamCreator(configuration).userControllerUpdateAll(where, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateById: function (id, requestBody, options) {
            var localVarAxiosArgs = exports.UserControllerApiAxiosParamCreator(configuration).userControllerUpdateById(id, requestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1["default"]; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        }
    };
};
/**
 * UserControllerApi - factory interface
 * @export
 */
exports.UserControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCount: function (where, options) {
            return exports.UserControllerApiFp(configuration).userControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreate: function (requestBody, options) {
            return exports.UserControllerApiFp(configuration).userControllerCreate(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteById: function (id, options) {
            return exports.UserControllerApiFp(configuration).userControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {UserFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFind: function (filter, options) {
            return exports.UserControllerApiFp(configuration).userControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {UserFilter} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindById: function (id, filter, options) {
            return exports.UserControllerApiFp(configuration).userControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLogin: function (requestBody, options) {
            return exports.UserControllerApiFp(configuration).userControllerLogin(requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerReplaceById: function (id, requestBody, options) {
            return exports.UserControllerApiFp(configuration).userControllerReplaceById(id, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateAll: function (where, requestBody, options) {
            return exports.UserControllerApiFp(configuration).userControllerUpdateAll(where, requestBody, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateById: function (id, requestBody, options) {
            return exports.UserControllerApiFp(configuration).userControllerUpdateById(id, requestBody, options)(axios, basePath);
        }
    };
};
/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
var UserControllerApi = /** @class */ (function (_super) {
    __extends(UserControllerApi, _super);
    function UserControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.userControllerCount = function (where, options) {
        return exports.UserControllerApiFp(this.configuration).userControllerCount(where, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.userControllerCreate = function (requestBody, options) {
        return exports.UserControllerApiFp(this.configuration).userControllerCreate(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.userControllerDeleteById = function (id, options) {
        return exports.UserControllerApiFp(this.configuration).userControllerDeleteById(id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {UserFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.userControllerFind = function (filter, options) {
        return exports.UserControllerApiFp(this.configuration).userControllerFind(filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {UserFilter} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.userControllerFindById = function (id, filter, options) {
        return exports.UserControllerApiFp(this.configuration).userControllerFindById(id, filter, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.userControllerLogin = function (requestBody, options) {
        return exports.UserControllerApiFp(this.configuration).userControllerLogin(requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.userControllerReplaceById = function (id, requestBody, options) {
        return exports.UserControllerApiFp(this.configuration).userControllerReplaceById(id, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.userControllerUpdateAll = function (where, requestBody, options) {
        return exports.UserControllerApiFp(this.configuration).userControllerUpdateAll(where, requestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.userControllerUpdateById = function (id, requestBody, options) {
        return exports.UserControllerApiFp(this.configuration).userControllerUpdateById(id, requestBody, options)(this.axios, this.basePath);
    };
    return UserControllerApi;
}(base_1.BaseAPI));
exports.UserControllerApi = UserControllerApi;
